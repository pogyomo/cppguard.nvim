*cppguard.txt*        For Neovim >= 0.10.0        Last change: 2024 October 21

==============================================================================
Table of Contents                                 *cppguard-table-of-contents*

1. cppguard.nvim                                      |cppguard-cppguard.nvim|
  - Requirements                         |cppguard-cppguard.nvim-requirements|
  - Installation                         |cppguard-cppguard.nvim-installation|
  - Introduction                         |cppguard-cppguard.nvim-introduction|
  - Usage                                       |cppguard-cppguard.nvim-usage|
  - APIS                                         |cppguard-cppguard.nvim-apis|

==============================================================================
1. cppguard.nvim                                      *cppguard-cppguard.nvim*

Automatically generates proper include guard for C++


REQUIREMENTS                             *cppguard-cppguard.nvim-requirements*

- Neovim >= 0.10.0
- luasnip <https://github.com/L3MON4D3/LuaSnip> (_optional_)


INSTALLATION                             *cppguard-cppguard.nvim-installation*

With lazy.nvim <https://github.com/folke/lazy.nvim>

>lua
    return {
        "pogyomo/cppguard.nvim",
        dependencies = {
            "L3MON4D3/LuaSnip" -- If you're using luasnip.
        },
        lazy = true,
    }
<


INTRODUCTION                             *cppguard-cppguard.nvim-introduction*

C++ requires developer to write include guard to prevent that file is included
more than twice, and sometimes you need to write longer include guard, and
it’s painful.

So, this plugin provides apis that automatically generates such include guard.


USAGE                                           *cppguard-cppguard.nvim-usage*

This plugin provides `guard_string` which generates a string that is unique for
using in include guard.

For examples, consider the following directory structure.

>
    project
    |---CMakeLists.txt
    |---src
        |---dir
            |---sub
                |---file.h <-here
<

When you open file.h, then call this function, you will get
`PROJECT_DIR_SUB_FILE_H_`, that is following google C++ Style Guide
<https://google.github.io/styleguide/cppguide.html#The__define_Guard>.

If you’re using luasnip, you can add a snippet that automatically creates
include guard with following code:

>lua
    local luasnip = require("luasnip")
    luasnip.add_snippets("cpp", {
        -- Register snippet which can summon by typing `guard`
        require("cppguard").snippet_luasnip("guard")
    })
<

This snippet works as follow when you’re in such above, for example:

>
    guard|
    
    ↓ expand
    
    #ifndef PROJECT_DIR_SUB_FILE_H_
    #define PROJECT_DIR_SUB_FILE_H_
    
    |
    
    #endif
<


APIS                                             *cppguard-cppguard.nvim-apis*

- `guard_string(opts)`
    - `opts?: table` Options to manage the movement of this function. Having following fields:
        - `naming_method?: string` How to generates the include guard. Accept following strings:
            - `"google"` Follows google C++ Style Guide <https://google.github.io/styleguide/cppguide.html#The__define_Guard>.
- `snippent_luasnip(trig, opts)`
    - `trig: string` What summon this snippent.
    - `opts?: table` Options to manage how to generate include guard. Same as `opts` in `guard_string`.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
